# FROM golang:1.13-alpine as builder
FROM golang:1.17.3-alpine as builder

LABEL maintainer="masterial@protonmail.com"

# Force Go to use the cgo based DNS resolver. This is required to ensure DNS
# queries required to connect to linked containers succeed.
ENV GODEBUG netdns=cgo

# Pass a tag, branch or a commit using build-arg.  This allows a docker
# image to be built from a specified Git state.  The default image
# will use the Git tip of master by default.
# ARG checkout="v0.11.1-beta"
# ARG checkout="v0.12.1-beta-branch"
# ARG checkout="0-13-1-branch"
ARG checkout="master"

# Install dependencies and build the binaries.
RUN apk add --no-cache --update alpine-sdk git make gcc openssh-client

RUN git clone https://github.com/lightningnetwork/lnd /go/src/github.com/lightningnetwork/lnd
RUN cd /go/src/github.com/lightningnetwork/lnd \
    &&  git checkout $checkout \
    &&  make \
    &&  make install tags="signrpc walletrpc chainrpc invoicesrpc experimental"

# Start a new, final image.
FROM node:12-alpine as final

RUN apk update && apk add \
    tor \
    --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ \
    && rm -rf /var/cache/apk/*

EXPOSE 9050
EXPOSE 9051

COPY torrc.default /etc/tor/torrc
RUN chown -R tor /etc/tor

# RUN apt update && apt install -y curl gpg wget && \
#     mkdir -p /home/volt/.gnupg && \
#     echo "deb https://deb.torproject.org/torproject.org focal main" > /etc/apt/sources.list.d/tor.list && \
#     echo "deb-src https://deb.torproject.org/torproject.org focal main" >> /etc/apt/sources.list.d/tor.list && \
#     curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import && \
#     gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add - && \
#     apt update && apt install -y \
#     tor \
#     deb.torproject.org-keyring

EXPOSE 80
EXPOSE 9735

ENV NODE_ENV production
ENV NODE_SCHEME http

# Add bash and ca-certs, for quality of life and SSL-related reasons.
RUN apk --no-cache add bash ca-certificates

# Copy the binaries from the builder image.
COPY --from=builder /go/bin/lncli /bin/
COPY --from=builder /go/bin/lnd /bin/

# RUN apk add --no-cache --update nodejs=12.22.6-r0 nodejs-npm=12.22.6-r0 sqlite=3.30.1-r2 git supervisor

RUN apk add --update nodejs npm sqlite git supervisor

RUN git clone https://github.com/getzion/relay /relay/

WORKDIR /relay/

ARG zion_checkout="main"

RUN git checkout $zion_checkout

RUN apk --no-cache add g++ gcc libgcc libstdc++ linux-headers make jq git curl python2 libmcrypt-dev

RUN apk --no-cache add vim

USER root

# ARG NODE_WEBKIT_VERSION="0.42.0"
ARG NODE_WEBKIT_VERSION="0.58.0"
RUN rm -rf node_modules/
RUN npm install
RUN npm install --quiet node-gyp@3.8.0 -g
RUN npm -g config set user root
RUN npm install nw-gyp -g
RUN npm uninstall sqlite3
RUN npm install sqlite3 --build-from-source --runtime=node-webkit --target_arch=x64 --target=$NODE_WEBKIT_VERSION
RUN npm rebuild
RUN npm run tsc

VOLUME /relay/.lnd

COPY ./docker/lnd.sample.conf /relay/.lnd/lnd.conf

#Uncomment if you have a copy of the channel.db you want to use.
#COPY ./channel.db /relay/.lnd/data/graph/mainnet/

RUN git clone https://github.com/getzion/sphinx-keysend-test /sphinx-keysend/
WORKDIR /sphinx-keysend/

ARG sphinx_keysend_checkout="binary"

RUN git checkout $sphinx_keysend_checkout
RUN npm install

WORKDIR /relay/

RUN apk --no-cache add expect bash

RUN mkdir -p /var/log/supervisor
COPY ./docker/supervisord.conf /etc/supervisord.conf
COPY ./docker/lnd_supervisor.conf /etc/supervisor.d/lnd_supervisor.ini
COPY ./docker/relay_supervisor.conf /etc/supervisor.d/relay_supervisor.ini
COPY ./docker/tor_supervisor.conf /etc/supervisor.d/tor_supervisor.ini
COPY ./docker/aliases.sh /etc/profile.d/aliases.sh

CMD touch ./sphinx.db

ENV ENV="/etc/profile"

ENTRYPOINT [ "bash", "/relay/docker/entrypoint.sh" ]
